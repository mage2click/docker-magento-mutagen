#!/bin/bash
set -e

function print_header()
{
    local s=("$@") b w
    for l in "${s[@]}"; do
        ((w<${#l})) && { b="$l"; w="${#l}"; }
    done
    tput setaf 3

    echo "+-${b//?/-}-+"
    echo "| ${b//?/ } |"

    for l in "${s[@]}"; do
        printf '| %s%*s%s |\n' "$(tput setaf 2)" "-$w" "$l" "$(tput setaf 3)"
    done

    echo "| ${b//?/ } |"
    echo "+-${b//?/-}-+"

    tput sgr 0
}

function in_array()
{
    local array="$1[@]"
    local value=$2
    local in=0
    for entry in "${!array}"; do
        if [[ "$entry" == "$value" ]]; then
            in=1
            break
        fi
    done
    return ${in}
}

# Implicit --help if no arguments are passed
[[ -z "$@" ]] && HELP=1

for i in "$@"
    do
        case ${i} in
            -h|--help) HELP=1; break;;
            -i|--interactive) INTERACTIVE=1; shift; break;;

            --domain=*) DOMAIN="${i#*=}"; shift;;
            --magento-archive=*) ARCHIVE="${i#*=}"; shift;;
            --magento-project=*) PROJECT="${i#*=}"; shift;;
            --magento-db=*) DB="${i#*=}"; shift;;
            --magento-version=*) VERSION="${i#*=}"; shift;;
            --php-version=*) PHP_VER="${i#*=}"; shift;;
            --elasticsearch-version=*) ELASTICSEARCH_VER="${i#*=}"; shift;;

            --elasticsearch) ELASTICSEARCH=1; shift;;
            --varnish) VARNISH=1; shift;;
            --mailhog) MAILHOG=1; shift;;
            --rabbitmq) RABBITMQ=1; shift;;
            --cron) CRON=1; shift;;
            --composer) COMPOSER=1; shift;;

            *)
                >&2 ERROR="$ERROR $i"
                ;;
        esac
    done

if [[ ! -z "$@" ]] || [[ "$HELP" == "1" ]]; then

    print_header \
        'Mage2click' \
        '' \
        '#Docker #Magento #Mutagen development environment' \
        '' \
        'https://mage2.click' \
        'https://github.com/mage2click/docker-magento-mutagen'

    if [[ ! -z "$ERROR" ]]; then
        echo
        printf "\e[01;31mError: Unrecognized argument: %s\n\e[m" ${ERROR}
    fi

    USAGE="
Usage:

  [--domain=<domain>] [--php-version=<version>] [--elasticsearch-version=<version>]
  [--magento-archive=<path>] [--magento-project=<path>] [--magento-db=<path>]
  [--magento-version=<version>] [--composer] [--varnish] [--mailhog]
  [--rabbitmq] [--cron] [-i, --interactive] [-h, --help]

Parameters:

  --domain=<domain>                 Domain to use for the project, default is magento2.test
  --php-version=<version>           PHP version to use for the project, default is 7.3
                                    Currently supported PHP versions: 7.0, 7.1, 7.2 and 7.3
  --elasticsearch-version=<version> Elasticsearch version to use for the project, default is 6.7.2
                                    Currently supported Elasticsearch versions: 2.4, 5.6 and 6.7.2
  --magento-archive=<path>          Full path to downloaded Magento zip-archive to use in setup (optional).
  --magento-project=<path>          Full path to the existing Magento project to use in setup (optional).
                                    If specified, --magento-db parameter is required as well.
  --magento-db=<path>               Full path to .sql file with database dump to use in setup (optional).
                                    If specified, --magento-project parameter is required as well.
  --magento-version=<version>       Magento version to download from the official repository, default is 2.3.3.
                                    If --magento-archive parameter is specified, this will be skipped.

Flags:

  --composer                     Run composer install command during setup process.
  --elasticsearch                Use Elasticsearch search engine.
  --varnish                      Use Varnish cache.
  --mailhog                      Use MailHog email testing tool.
  --rabbitmq                     Use RabbitMQ message-broker.
  --cron                         Use cron service.

  -i, --interactive              Start interactive setup.
  -h, --help                     Show usage information.
"

    echo "$USAGE"
    exit

elif [[ "$INTERACTIVE" == "1" ]]; then

    print_header \
        'Mage2click' \
        '' \
        'Welcome to interactive setup of #Docker #Magento #Mutagen' \
        'development environment' \
        '' \
        'https://mage2.click' \
        'https://github.com/mage2click/docker-magento-mutagen'

    #exec </dev/tty

    echo
    read -p "Specify desired domain for the project [magento2.test]: " DOMAIN </dev/tty
    DOMAIN=${DOMAIN:-magento2.test}
    echo ${DOMAIN}

    RES=
    while grep -qw "$DOMAIN" /etc/hosts || [[ -z "$DOMAIN" ]]; do
        if [[ -z "$DOMAIN" ]]; then
            echo "$(tput bold)$(tput setaf 1)Domain cannot be empty!"
            tput sgr 0
        else
            echo
            echo "Domain $DOMAIN already exists in /etc/hosts! Choose an option:"
            select OPTS in "Proceed with this domain" "Specify new domain"; do
                case ${OPTS} in
                    "Specify new domain" ) RES=1; break;;
                    "Proceed with this domain" ) break;;
                esac
            done </dev/tty
        fi

        if [[ -z "$RES" ]]; then
            break
        else
            echo
            read -p "New domain: " DOMAIN </dev/tty
            if [[ -z "$DOMAIN" ]]; then
                echo ${DOMAIN}
            fi
        fi
    done

    if ! grep -qw "$DOMAIN" /etc/hosts; then
        echo
        echo "Your system password has been requested to add an entry to /etc/hosts..."
        echo "127.0.0.1 $DOMAIN" | sudo tee -a /etc/hosts
    fi

    RES=
    echo
    echo "Select the source of Magento source files:"
    select OPTS in "Download from official repo" "Use downloaded zip-archive" "Import existing project"; do
        case ${OPTS} in
            "Download from official repo" ) RES=1; break;;
            "Use downloaded zip-archive" ) RES=2; break;;
            "Import existing project" ) break;;
        esac
    done </dev/tty

    echo
    if [[ -z "$RES" ]]; then
        read -p "Full path to existing Magento project: " PROJECT </dev/tty

        while [[ ! -d "$PROJECT" ]]; do
            echo "$(tput bold)$(tput setaf 1)The specified path does not exist!"
            tput sgr 0
            echo
            read -p "Full path to existing Magento project: " PROJECT </dev/tty
        done

        RES=
        echo
        echo "Import existing Magento project SQL dump file or proceed with standard DB installation?"
        select OPTS in "Import SQL dump file" "Standard DB installation"; do
            case ${OPTS} in
                "Import SQL dump file" ) RES=1; break;;
                "Standard DB installation" ) break;;
            esac
        done </dev/tty

        if [[ ! -z "$RES" ]]; then
            echo
            read -p "Full path to database SQL dump file: " DB </dev/tty

            while [[ ! -f "$DB" ]]; do
                echo "$(tput bold)$(tput setaf 1)The specified path does not exist!"
                tput sgr 0
                echo
                read -p "Full path to database SQL dump file: " DB </dev/tty
            done
        fi
    elif [[ "$RES" == "2" ]]; then
        read -p "Full path to downloaded Magento zip-archive: " ARCHIVE </dev/tty

        while [[ ! -f "$ARCHIVE" ]]; do
            echo "$(tput bold)$(tput setaf 1)The specified path does not exist!"
            tput sgr 0
            echo
            read -p "Full path to downloaded Magento zip-archive: " ARCHIVE </dev/tty
        done
    else
        read -p "Magento version to download? [2.3.3]: " VERSION </dev/tty
        VERSION=${VERSION:-2.3.3}
        echo ${VERSION}
    fi

    echo
    echo "Select optional features for development environment:"

    echo
    echo "Use Elasticsearch search engine?"
    select OPTS in "Yes" "No"; do
        case ${OPTS} in
            "Yes" ) ELASTICSEARCH=1; break;;
            "No" ) break;;
        esac
    done </dev/tty

    if [[ ! -z ${ELASTICSEARCH} ]]; then
        echo
        echo "What Elasticsearch version to use?"
        select OPTS in "2.4" "5.6" "6.7.2"; do
            case ${OPTS} in
                "2.4" ) ELASTICSEARCH_VER='2.4'; break;;
                "5.6" ) ELASTICSEARCH_VER='5.6'; break;;
                "6.7.2" ) ELASTICSEARCH_VER='6.7.2'; break;;
            esac
        done </dev/tty

        ELASTICSEARCH_VER=${ELASTICSEARCH_VER:-6.7.2}
    fi

    echo
    echo "Use Varnish cache?"
    select OPTS in "Yes" "No"; do
        case ${OPTS} in
            "Yes" ) VARNISH=1; break;;
            "No" ) break;;
        esac
    done </dev/tty

    echo
    echo "Use MailHog email testing tool?"
    select OPTS in "Yes" "No"; do
        case ${OPTS} in
            "Yes" ) MAILHOG=1; break;;
            "No" ) break;;
        esac
    done </dev/tty

    echo
    echo "Use RabbitMQ message-broker?"
    select OPTS in "Yes" "No"; do
        case ${OPTS} in
            "Yes" ) RABBITMQ=1; break;;
            "No" ) break;;
        esac
    done </dev/tty

    echo
    echo "Use cron service?"
    select OPTS in "Yes" "No"; do
        case ${OPTS} in
            "Yes" ) CRON=1; break;;
            "No" ) break;;
        esac
    done </dev/tty

    echo
    echo "What PHP version to use?"
    select OPTS in "7.0" "7.1" "7.2" "7.3"; do
        case ${OPTS} in
            "7.0" ) PHP_VER='7.0'; break;;
            "7.1" ) PHP_VER='7.1'; break;;
            "7.2" ) PHP_VER='7.2'; break;;
            "7.3" ) PHP_VER='7.3'; break;;
        esac
    done </dev/tty

    PHP_VER=${PHP_VER:-7.3}

    echo
    echo "Use \`composer install\` command during the setup process?"
    select OPTS in "Yes" "No"; do
        case ${OPTS} in
            "Yes" ) COMPOSER=1; break;;
            "No" ) break;;
        esac
    done </dev/tty

else
    print_header \
        'Mage2click' \
        '' \
        'Welcome to one-line setup of #Docker #Magento #Mutagen' \
        'development environment' \
        '' \
        'https://mage2.click' \
        'https://github.com/mage2click/docker-magento-mutagen'

    DOMAIN=${DOMAIN:-magento2.test}

    if ! grep -qw "$DOMAIN" /etc/hosts; then
        echo
        echo "Your system password has been requested to add an entry to /etc/hosts..."
        echo "127.0.0.1 $DOMAIN" | sudo tee -a /etc/hosts
    fi

    if [[ ! -z "$ARCHIVE" ]] && [[ ! -f "$ARCHIVE" ]]; then
        echo
        echo "$(tput bold)$(tput setaf 1)Specified path to downloaded Magento zip-archive does not exist!"
        tput sgr 0
        exit
    fi

    if [[ ! -z "$PROJECT" ]] && [[ ! -d "$PROJECT" ]]; then
        echo
        echo "$(tput bold)$(tput setaf 1)Specified path to existing Magento project does not exist!"
        tput sgr 0
        exit
    fi

    if [[ ! -z "$DB" ]] && [[ ! -f "$DB" ]]; then
        echo
        echo "$(tput bold)$(tput setaf 1)Specified path to database SQL dump file does not exist!"
        tput sgr 0
        exit
    fi

    VERSION=${VERSION:-2.3.3}
    PHP_VER=${PHP_VER:-7.3}
    ELASTICSEARCH_VER=${ELASTICSEARCH_VER:-6.7.2}

    VERSIONS=("7.0" "7.1" "7.2" "7.3")
    if in_array VERSIONS "$PHP_VER"; then
        echo
        echo "$(tput bold)$(tput setaf 1)Specified PHP version ($PHP_VER) does not supported!"
        echo "Currently supported PHP versions: 7.0, 7.1, 7.2 and 7.3"
        tput sgr 0
        exit
    fi

    if [[ ! -z ${ELASTICSEARCH} ]]; then
        VERSIONS=("2.4" "5.6" "6.7.2")
        if in_array VERSIONS "$ELASTICSEARCH_VER"; then
            echo
            echo "$(tput bold)$(tput setaf 1)Specified Elasticsearch version ($ELASTICSEARCH_VER) does not supported!"
            echo "Currently supported Elasticsearch versions: 2.4, 5.6 and 6.7.2"
            tput sgr 0
            exit
        fi
    fi
fi

PORTS=1

while [[ ! -z "$PORTS" ]]; do
    echo
    printf "Checking ports availability..."

    PORTS=""

    if lsof -PiTCP:80 -sTCP:LISTEN -t >/dev/null; then
        PORTS="$PORTS 80,"
    fi

    if lsof -PiTCP:443 -sTCP:LISTEN -t >/dev/null; then
        PORTS="$PORTS 443,"
    fi

    if lsof -PiTCP:3306 -sTCP:LISTEN -t >/dev/null; then
        PORTS="$PORTS 3306,"
    fi

    if [[ ! -z "$ELASTICSEARCH" ]]; then
        if lsof -PiTCP:9200 -sTCP:LISTEN -t >/dev/null; then
            PORTS="$PORTS 9200,"
        fi

        if lsof -PiTCP:9300 -sTCP:LISTEN -t >/dev/null; then
            PORTS="$PORTS 9300,"
        fi
    fi

    if [[ ! -z "$VARNISH" ]]; then
        if lsof -PiTCP:8000 -sTCP:LISTEN -t >/dev/null; then
            PORTS="$PORTS 8000,"
        fi

        if lsof -PiTCP:6082 -sTCP:LISTEN -t >/dev/null; then
            PORTS="$PORTS 6082,"
        fi
    fi

    if [[ ! -z "$MAILHOG" ]]; then
        if lsof -PiTCP:1025 -sTCP:LISTEN -t >/dev/null; then
            PORTS="$PORTS 1025,"
        fi

        if lsof -PiTCP:8025 -sTCP:LISTEN -t >/dev/null; then
            PORTS="$PORTS 8025,"
        fi
    fi

    if [[ ! -z "$RABBITMQ" ]]; then
        if lsof -PiTCP:5672 -sTCP:LISTEN -t >/dev/null; then
            PORTS="$PORTS 5672,"
        fi

        if lsof -PiTCP:15672 -sTCP:LISTEN -t >/dev/null; then
            PORTS="$PORTS 15672,"
        fi
    fi

    if [[ ! -z "$PORTS" ]]; then
        echo
        echo
        echo "$(tput bold)$(tput setaf 1)[${PORTS%?} ]"
        tput sgr 0
        echo
        echo "Ports listed above are already allocated on the host machine."
        echo "This will cause an error when running Docker containers!"
        echo "If any other host services or active Docker containers are using these ports, stop them respectively."

        echo
        read -n 1 -s -r -p "Press any key to continue setup..." </dev/tty && echo
    fi
done

printf " OK!"
echo

echo
echo "Starting setup..."
echo

mkdir tmp-mage2click
cd tmp-mage2click
git init -qqq
git remote add origin https://github.com/mage2click/docker-magento-mutagen
git fetch origin -qqq
git checkout origin/master -- compose/magento-2
for x in compose/magento-2/* compose/magento-2/.[!.]* compose/magento-2/..?*; do
  if [[ -e "$x" ]]; then mv -- "$x" ../; fi
done
cd ../

if [[ -z "$VARNISH" ]]; then
    CONCAT="cat parts/app/default.yml"
else
    CONCAT="cat parts/app/varnish.yml"
fi

CONCAT="$CONCAT parts/db.yml parts/redis.yml"

if [[ ! -z "$ELASTICSEARCH" ]]; then
    CONCAT="$CONCAT parts/elasticsearch/$ELASTICSEARCH_VER.yml"
fi

if [[ -z "$MAILHOG" ]]; then
    CONCAT="$CONCAT parts/phpfpm/$PHP_VER.yml"
else
    CONCAT="$CONCAT parts/phpfpm/$PHP_VER-mailhog.yml parts/mailhog.yml"
fi

if [[ ! -z "$RABBITMQ" ]]; then
    CONCAT="$CONCAT parts/rabbitmq.yml"
fi

if [[ ! -z "$CRON" ]]; then
    CONCAT="$CONCAT parts/cron/$PHP_VER.yml"
fi

if [[ -z "$ELASTICSEARCH" ]]; then
    CMD=("$CONCAT parts/volumes/default.yml")
else
    CMD=("$CONCAT parts/volumes/elasticsearch.yml")
fi


${CMD[@]} > docker-compose.yml

rm -rf tmp-mage2click parts docker-compose.yml.sample
git init
echo

echo "Checking Mutagen version..."
bin/update --mutagen
echo

if [[ ! -z "$ARCHIVE" ]]; then
    bin/setup/unzip ${ARCHIVE}
elif [[ ! -z "$PROJECT" ]]; then
    bin/setup/import ${PROJECT}
else
    bin/setup/download ${VERSION}
fi
echo

bin/setup/start \
    ${DOMAIN:+ --domain=${DOMAIN}} \
    ${DB:+ --magento-db="${DB}"} \
    ${COMPOSER:+ --composer} \
    ${ELASTICSEARCH:+ --elasticsearch} \
    ${ELASTICSEARCH_VER:+ --elasticsearch-version=${ELASTICSEARCH_VER}} \
    ${VARNISH:+ --varnish} \
    ${MAILHOG:+ --mailhog} \
    ${RABBITMQ:+ --rabbitmq}
